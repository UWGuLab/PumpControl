/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pumpcontrol;

import com.fazecast.jSerialComm.SerialPort;
import java.text.NumberFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Gu_Lab_public
 */
public class GUI extends javax.swing.JFrame {

    //values for the fields
    private int amount = 0;

    //fileds for data entry
    private NumberFormat amountFormat;

    //define the pump
    private static Pump the_pump_1;
    private static Pump the_pump_2;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jOptionPane1 = new javax.swing.JOptionPane();
        jLabel_volume_chemical = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jLabel_output = new javax.swing.JLabel();
        pump1CheckBox = new javax.swing.JCheckBox();
        pump2CheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        pump1SpeedList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        pump2SpeedList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        volume2TextField = new javax.swing.JTextField();
        volume1TextField = new javax.swing.JTextField();

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_volume_chemical.setText("Pump 1 Volume (uL)");

        startBtn.setText("Start");
        startBtn.setPreferredSize(new java.awt.Dimension(100, 100));
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
        });

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        jLabel_output.setText("Output");

        pump1CheckBox.setSelected(true);
        pump1CheckBox.setText("Pump 1");
        pump1CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pump1CheckBoxActionPerformed(evt);
            }
        });

        pump2CheckBox.setSelected(true);
        pump2CheckBox.setText("Pump 2");

        pump1SpeedList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "10.4", "20.8", "31.2", "41.6", "52" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        pump1SpeedList.setSelectedIndex(4);
        jScrollPane2.setViewportView(pump1SpeedList);

        jLabel1.setText("Pump 1 Speed (uL/s)");

        jLabel2.setText("Pump");

        pump2SpeedList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "10.4", "20.8", "31.2", "41.6", "52" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        pump2SpeedList.setSelectedIndex(4);
        jScrollPane4.setViewportView(pump2SpeedList);

        jLabel3.setText("Pump 2 Speed (uL/s)");

        jLabel4.setText("Pump 2 Volume (uL)");

        volume2TextField.setText("0");

        volume1TextField.setText("0");
        volume1TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volume1TextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel_output)
                            .addComponent(pump1CheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(volume1TextField)
                                    .addComponent(jLabel_volume_chemical, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(volume2TextField)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                                    .addComponent(pump2CheckBox))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pump1CheckBox)
                            .addComponent(pump2CheckBox))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_volume_chemical, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(volume2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(volume1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel_output)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setPump() {
        // Gets all available ports
        SerialPort[] ports = SerialPort.getCommPorts();

        // Displays all available ports for the use to use
        ArrayList portsNames = new ArrayList(ports.length);
        for (int i = 0; i < ports.length; i++) {
            System.out.println("port " + i + ": " + ports[i].getSystemPortName());
            portsNames.add(ports[i].getSystemPortName());
        }
        portsNames.add("None");
        
        // Instantiate the first pump connection with PC
        // Asks the user for input for which port to use            
        boolean pump1Used = false;
        String userport = "";
        if (pump1CheckBox.isSelected()) {

            //Custom button text
            userport = (String)jOptionPane1.showInputDialog(
                 this,
                 "Please select the port for the first pump.",
                 "Pump 1 Port Selection",
                 jOptionPane1.PLAIN_MESSAGE,
                 null,
                 portsNames.toArray(),
                 "None");

            if (userport.equals("None")) {
                the_pump_1 = null;
            } else {
                int numOfPort = portsNames.indexOf(userport);
                the_pump_1 = new Pump(ports[numOfPort]);
                pump1Used = true;
                the_pump_1.setMaxSpeed((int) (new Double(pump1SpeedList.getSelectedValue()) / Pump.MAX_VOL * Pump.RESOLUTION));
                outputTextArea.append("The " + userport + " pump port for Pump 1 has opened.\n");
            }
        } else {
            the_pump_1 = null;
        }

        if (pump2CheckBox.isSelected()) {

            // Instantiate the second pump the connection with PC
            // Asks the user for input for which port to use
            if (pump1Used && !userport.equals("None")) {
                portsNames.remove(userport);
            }
            userport = (String)jOptionPane1.showInputDialog(
                 this,
                 "Please select the port for the second pump.",
                 "Pump 2 Port Selection",
                 jOptionPane1.PLAIN_MESSAGE,
                 null,
                 portsNames.toArray(),
                 "None");

            if (userport.equals("None")) {
                the_pump_2 = null;
            } else {                    
                int numOfPort = portsNames.indexOf(userport);
                the_pump_2 = new Pump(ports[numOfPort]);
                outputTextArea.append("The " + userport + " pump port for Pump 2 has opened.\n");
                the_pump_2.setMaxSpeed((int) (new Double(pump2SpeedList.getSelectedValue()) / Pump.MAX_VOL * Pump.RESOLUTION));
            }
        } else {
            the_pump_2 = null;
        }

    }

    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
        try {
            // TODO add your handling code here:  
            //record start time
            long startTime = System.currentTimeMillis();
            
            setPump(); 
            runForOneCycle(new Integer(volume1TextField.getText()), new Integer(volume2TextField.getText()));
            
            long estimatedTime = System.currentTimeMillis() - startTime;
            int minutes = (int) (estimatedTime/60000);
            int seconds = (int) estimatedTime/1000 - minutes * 60;
            outputTextArea.append("Time used: " + minutes + " minutes, " + seconds + " seconds." + "\n");
            if (the_pump_1 != null) {
                the_pump_1.quit();
            }
            if (the_pump_2 != null) {
                the_pump_2.quit();
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startBtnMouseClicked

    private void pump1CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pump1CheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pump1CheckBoxActionPerformed

    private void volume1TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volume1TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_volume1TextFieldActionPerformed

    public void runForOneCycle(int volume1, int volume2) throws InterruptedException {

        //get start
        if (the_pump_1 == null && the_pump_2 == null) {
            
        } else if (the_pump_1 == null) {
            
            the_pump_2.runVolume(volume2);
            
        } else if (the_pump_2 == null) {
            
            the_pump_1.runVolume(volume1);
            
        } else {
            
            (new Thread() {
                @Override
                public void run() {
                    the_pump_1.runVolume(volume1);
                }
            }).start();
            the_pump_2.runVolume(volume2);
            
        }
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_output;
    private javax.swing.JLabel jLabel_volume_chemical;
    private javax.swing.JList<String> jList2;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JCheckBox pump1CheckBox;
    private javax.swing.JList<String> pump1SpeedList;
    private javax.swing.JCheckBox pump2CheckBox;
    private javax.swing.JList<String> pump2SpeedList;
    private javax.swing.JButton startBtn;
    private javax.swing.JTextField volume1TextField;
    private javax.swing.JTextField volume2TextField;
    // End of variables declaration//GEN-END:variables
}
